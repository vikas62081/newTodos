{"version":3,"sources":["components/todo/index.js","components/addTodo/index.js","components/loadMore/index.js","components/backdrop/index.js","components/alert/index.js","utility/index.js","container/todoApp/index.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","deleteTodo","completeTask","id","name","description","completed","Grid","container","style","backgroundColor","padding","borderRadius","margin","item","sm","Typography","variant","color","fontFamily","textDecoration","spacing","alignContent","align","Button","background","onClick","AddTodo","addTodo","useState","title","setTitle","setDescription","inputStyle","height","width","fontWeight","onSubmit","e","preventDefault","capitalize","xs","placeholder","required","onChange","target","value","type","LoadMore","showMore","length","size","emitter","EventEmitter","useStyles","makeStyles","theme","backdrop","zIndex","drawer","Loading","classes","open","setOpen","autoHideAfterTimeout","setTimeout","addListener","Backdrop","className","CircularProgress","alertEmitter","Alert","props","elevation","root","marginTop","Notification","msg","setMsg","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","severity","setTodosToLocal","todos","localStorage","setItem","JSON","stringify","String","prototype","this","charAt","toUpperCase","slice","showNotification","emit","AppContainer","parse","getItem","getTodosFromLocal","setTodos","rowsLast","setRowLast","newTodos","filter","map","maxWidth","minWidth","Math","random","maxHeight","overflow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11027838.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Grid, Button, Typography } from '@material-ui/core'\r\n\r\nconst Todo = ({todo,deleteTodo,completeTask}) => {\r\nconst {id,name,description,completed}=todo\r\n    return  <Grid container style={{ backgroundColor: '#444444', padding: \"5px 20px\", borderRadius: 3,margin:\"8px 0\" }}>\r\n            <Grid item sm={8}>\r\n                <Typography variant=\"h4\" \r\n                style={completed?{ color: \"#eaaa18\", fontFamily: \"cursive\",textDecoration: \"line-through\" }:{ color: \"#eaaa18\", fontFamily: \"cursive\" }}>{name}</Typography>\r\n                <Typography variant=\"body1\" style={{ color: \"#efe7e7\", fontFamily: \"cursive\" }}>\r\n    {description}</Typography>\r\n            </Grid>\r\n            <Grid container sm={4} spacing={1} item alignContent=\"center\">\r\n                <Grid item sm={6} align=\"right\">\r\n                {!completed&&<Button variant=\"outlined\" color=\"primary\" style={{background:\"#f3f3f3\"}}\r\n                onClick={()=>completeTask(id)}>\r\n                        Complete\r\n</Button>}</Grid>  \r\n                <Grid item sm={6}> <Button variant=\"outlined\" color=\"secondary\" style={{background:\"#f3f3f3\"}}\r\n                onClick={()=>deleteTodo(id)}>\r\n                    Delete\r\n                </Button></Grid>\r\n            </Grid>\r\n        </Grid>\r\n}\r\nexport default Todo","import React, { useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { Button, Typography } from '@material-ui/core'\r\nconst AddTodo = ({ addTodo }) => {\r\n    const [title, setTitle] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        addTodo(title.capitalize(), description.capitalize())\r\n        setTitle(\"\")\r\n        setDescription(\"\")\r\n    }\r\n\r\n    const inputStyle = { height: 32, width: \"90%\", fontWeight: 600, backgroundColor: \"#f3f3f3\", padding: \"0 10px\" }\r\n    return (<form onSubmit={handleSubmit}>\r\n        <Grid container style={{ backgroundColor: '#444444', borderRadius: 3, padding: 20, margin: \"15px 0\" }}>\r\n            <Grid sm={4} xs={12} item>\r\n                <Typography>Name :</Typography>\r\n                <input style={inputStyle} placeholder=\"Enter the title\" required\r\n                    onChange={e => setTitle(e.target.value)}\r\n                    value={title} /></Grid>\r\n            <Grid sm={4} xs={12} item>\r\n                <Typography>Description :</Typography><input style={inputStyle} placeholder=\"Enter the description\"\r\n                    onChange={e => setDescription(e.target.value)} value={description} /></Grid>\r\n            <Grid sm={4} item><Typography>  <br/></Typography>\r\n                <Button type='submit' variant=\"contained\" style={{ backgroundColor: \"#eaaa18\" }}>Add Todo</Button>\r\n            </Grid>\r\n\r\n        </Grid> </form>)\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\nimport { Button, Grid } from '@material-ui/core'\r\n\r\nconst LoadMore=({showMore,length})=>{\r\n\r\n    return <Grid align=\"center\">\r\n        <Button variant=\"outlined\" size=\"small\" onClick={showMore} style={{ backgroundColor: \"#eaaa18\",margin:\"5px 0\" }}>\r\n            Load More ({length})\r\n        </Button>\r\n        </Grid>\r\n}\r\nexport default LoadMore","import React, { useState } from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { EventEmitter } from 'fbemitter'\r\n\r\nexport const emitter = new EventEmitter();\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\nconst Loading = () => {\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false)\r\n  const reset = () => {\r\n    setOpen(false)\r\n  }\r\n  const autoHideAfterTimeout = () => {\r\n    setTimeout(() => reset(), 1500)\r\n  }\r\n  emitter.addListener(\"PROCESSING\", () => {\r\n    setOpen(true)\r\n    autoHideAfterTimeout()\r\n  })\r\n  if (!open) {\r\n    return null\r\n  }\r\n  return <Backdrop className={classes.backdrop} open={open}>\r\n    <CircularProgress color=\"secondary\" />\r\n  </Backdrop>\r\n}\r\n\r\nexport default Loading","import React, { useState } from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { EventEmitter } from 'fbemitter'\r\nimport Slide from '@material-ui/core/Slide';\r\nexport const alertEmitter = new EventEmitter();\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\nconst Notification = () => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [msg, setMsg] = useState('')\r\n\r\n    alertEmitter.addListener(\"NOTIFICATION\", (msg) => {\r\n        setTimeout(() => setOpen(true), 500)\r\n        setMsg(msg)\r\n    })\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    return <Snackbar open={open} anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n            {msg}\r\n        </Alert>\r\n    </Snackbar>\r\n}\r\n\r\nexport default Notification;","import { emitter } from \"../components/backdrop\"\r\nimport { alertEmitter } from \"../components/alert\"\r\n\r\nexport const setTodosToLocal=(todos)=>{\r\n    localStorage.setItem(\"todos\",JSON.stringify(todos))\r\n}\r\n\r\nexport const getTodosFromLocal=()=>{\r\n    const todos=JSON.parse(localStorage.getItem(\"todos\"))\r\n    return todos?todos:[]\r\n}\r\n String.prototype.capitalize = function () {\r\n    return this.charAt(0).toUpperCase() + this.slice(1);\r\n}\r\n\r\nexport const showNotification=(msg)=>{\r\n    emitter.emit(\"PROCESSING\")\r\n    alertEmitter.emit(\"NOTIFICATION\",msg)\r\n}","import React, { useState } from 'react'\r\nimport Todo from '../../components/todo'\r\nimport AddTodo from '../../components/addTodo'\r\nimport LoadMore from '../../components/loadMore'\r\nimport { setTodosToLocal, getTodosFromLocal, showNotification } from '../../utility'\r\nimport { emitter } from '../../components/backdrop'\r\n\r\nconst AppContainer = () => {\r\n    const MAX_SHOW = 4\r\n    const [todos, setTodos] = useState(() => getTodosFromLocal())\r\n    const [rowsLast, setRowLast] = useState(MAX_SHOW)\r\n    const addTodo = (title, description) => {\r\n       showNotification(\"Task created successfully\")\r\n        const newTodos = [{ id: Math.random(), name: title, description, completed: false }, ...todos]\r\n        setTodos(newTodos)\r\n        setTodosToLocal(newTodos)\r\n    }\r\n    const showMoreClicked = () => {\r\n       emitter.emit(\"PROCESSING\")\r\n        setRowLast(rowsLast + MAX_SHOW)\r\n    }\r\n\r\n    const deleteTodo = (id) => {\r\n        showNotification(\"Task deleted successfully\")\r\n        const newTodos = todos.filter(todo => todo.id !== id)\r\n        setTodos(newTodos)\r\n        setTodosToLocal(newTodos)\r\n    }\r\n\r\n    const completeTask = (id) => {\r\n        showNotification(\"Task completed successfully\")\r\n        const newTodos = todos.map(todo => (todo.id === id ? { ...todo, completed: !todo.completed } : todo))\r\n        setTodos(newTodos)\r\n        setTodosToLocal(newTodos)\r\n    }\r\n\r\n    return <div style={{ maxWidth: \"1000px\", minWidth: 300, margin: \"20px auto\" }}>\r\n        <h1 align=\"center\">My Todos</h1>\r\n        <AddTodo addTodo={addTodo} />\r\n\r\n        <div style={{ maxHeight: 400, overflow: \"auto\" }}>\r\n            {todos.length > 0 ? todos.slice(0, rowsLast).map(todo =>\r\n                <Todo todo={todo} deleteTodo={deleteTodo} completeTask={completeTask} />) :\r\n             <p align=\"center\">Add todo to display here :)</p>}\r\n\r\n            {todos.length > MAX_SHOW && rowsLast < todos.length ?\r\n                <LoadMore length={todos.length - rowsLast} showMore={showMoreClicked} /> : null}\r\n        </div>\r\n    </div>\r\n}\r\nexport default AppContainer ","import React from 'react';\nimport './App.css';\nimport AppContainer from './container/todoApp';\nimport Loading from './components/backdrop';\nimport Notification from './components/alert';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Loading/>\n       <Notification/>\n     <AppContainer/> \n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}